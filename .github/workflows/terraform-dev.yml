name: Terraform dev

on:
  push:
    branches: [main]
    paths:
      - infra/**
      - '**/*.tf*'
  pull_request:
    branches: [main]
    paths:
      - infra/**
      - '**/*.tf*'

concurrency:
  group: tf-dev-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  pull-requests: write

env:
  AWS_REGION:                  ${{ vars.AWS_REGION }}
  TF_VAR_aws_region:           ${{ vars.AWS_REGION }}
  TF_VAR_project_tag:          ${{ vars.PROJECT_TAG }}
  TF_VAR_environment:          ${{ vars.ENVIRONMENT }}
  TF_VAR_vpc_cidr:             ${{ vars.VPC_CIDR }}
  TF_VAR_azs:                  '["${{ vars.AZ1 }}","${{ vars.AZ2 }}"]'
  TF_VAR_public_subnet_cidrs:  '["${{ vars.PUBLIC_SUBNET1 }}","${{ vars.PUBLIC_SUBNET2 }}"]'
  TF_VAR_private_subnet_cidrs: '["${{ vars.PRIVATE_SUBNET1 }}","${{ vars.PRIVATE_SUBNET2 }}"]'
  TF_VAR_tags:                 '{"Owner":"${{ vars.OWNER_TAG }}","Stage":"${{ vars.STAGE_TAG }}"}'

jobs:

  plan-bootstrap:
    runs-on: ubuntu-latest
    environment: dev
    defaults: { run: { working-directory: infra/dev/bootstrap } }
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.9.6 }
      - name: AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_DEV_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - run: terraform fmt -recursive -check
      - run: terraform init -backend-config="key=dev/bootstrap.tfstate" -upgrade
      - run: terraform validate -no-color
      - id: tfplan
        run: terraform plan -refresh=false -no-color -input=false -out=tfplan | tee plan.txt
      - uses: actions/upload-artifact@v4
        with:
          name: tfplan-bootstrap
          path: infra/dev/bootstrap/tfplan
      - if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: tf-bootstrap
          message: |
            ### Terraform plan – bootstrap
            <details><summary>Show</summary>
            ```terraform
            ${{ steps.tfplan.outputs.stdout }}
            ```
            </details>

  apply-bootstrap:
    if: github.ref == 'refs/heads/main' && needs.plan-bootstrap.result == 'success'
    needs: plan-bootstrap
    runs-on: ubuntu-latest
    environment: dev
    defaults: { run: { working-directory: infra/dev/bootstrap } }
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.9.6 }
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_DEV_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: actions/download-artifact@v4
        with:
          name: tfplan-bootstrap
          path: infra/dev/bootstrap
      - run: terraform init -backend-config="key=dev/bootstrap.tfstate"
      - run: terraform apply -auto-approve tfplan

  plan-platform:
    needs: apply-bootstrap
    runs-on: ubuntu-latest
    environment: dev
    defaults: { run: { working-directory: infra/dev/platform } }
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.9.6 }
      - name: AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_DEV_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - run: terraform fmt -recursive -check
      - run: terraform init -backend-config="key=dev/platform.tfstate" -upgrade
      - run: terraform validate -no-color
      - id: tfplan
        run: terraform plan -refresh=false -no-color -input=false -out=tfplan | tee plan.txt
      - uses: actions/upload-artifact@v4
        with:
          name: tfplan-platform
          path: infra/dev/platform/tfplan
      - if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: tf-platform
          message: |
            ### Terraform plan – platform
            <details><summary>Show</summary>
            ```terraform
            ${{ steps.tfplan.outputs.stdout }}
            ```
            </details>

  apply-platform:
    if: github.ref == 'refs/heads/main' && needs.plan-platform.result == 'success'
    needs: plan-platform
    runs-on: ubuntu-latest
    environment: dev
    defaults: { run: { working-directory: infra/dev/platform } }
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.9.6 }
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_DEV_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: actions/download-artifact@v4
        with:
          name: tfplan-platform
          path: infra/dev/platform
      - run: terraform init -backend-config="key=dev/platform.tfstate"
      - run: terraform apply -auto-approve tfplan
